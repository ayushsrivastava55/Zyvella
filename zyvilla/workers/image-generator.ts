import "dotenv/config";
import { Worker, Job } from "bullmq";
import { fal } from "@fal-ai/client";
import { z } from "zod";

console.log("üöÄ Starting image generation worker...");

// 1. Environment validation
const requiredEnvVars = ['FAL_KEY'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error(`‚ùå Missing environment variables: ${missingVars.join(', ')}`);
  console.error('Please create a .env file with:');
  console.error('FAL_KEY=your_fal_api_key');
  process.exit(1);
}

// 2. Initialize FAL client
fal.config({
  credentials: process.env.FAL_KEY!
});

// 3. Define job data schema
const jobDataSchema = z.object({
  imageUrl: z.string().url(),
  prompt: z.string().optional(),
  personImage: z.string().optional(), // Optional person image for virtual try-on
});

// 4. Image processing functions

/**
 * Remove background from person's image using Fal.ai
 */
async function removePersonBackground(imageUrl: string): Promise<string> {
  console.log("üñºÔ∏è  Removing background from person's image using Fal.ai");
  
  try {
    const result = await fal.subscribe("fal-ai/imageutils/rembg", {
      input: {
        image_url: imageUrl
      }
    });

    if (!result.data?.image?.url) {
      throw new Error("Background removal failed - no processed image returned");
    }

    const processedImageUrl = result.data.image.url;
    console.log("‚úÖ Background removed successfully");
    return processedImageUrl;
  } catch (error) {
    console.error("‚ùå Background removal failed:", error);
    throw error;
  }
}

/**
 * Generate image using FLUX Kontext Pro with exact jewelry reference
 * Perfect for prompt-based generation with specific jewelry
 */
async function generateWithJewelryReference(jewelryImageUrl: string, prompt: string): Promise<string> {
  console.log(`üé® Generating image with exact jewelry reference using FLUX Kontext Pro`);
  console.log(`üìù Prompt: "${prompt}"`);
  console.log(`üíé Jewelry reference: ${jewelryImageUrl}`);
  
  try {
    // Enhanced prompt for jewelry generation
    const enhancedPrompt = `${prompt}, wearing this exact piece of jewelry, high quality photography, professional lighting, detailed jewelry rendering, photorealistic, 4k resolution`;
    
    const result = await fal.subscribe("fal-ai/flux-pro/kontext", {
      input: {
        prompt: enhancedPrompt,
        image_url: jewelryImageUrl,
        num_inference_steps: 28,
        guidance_scale: 3.5,
        image_size: "portrait_4_3" as const,
        enable_safety_checker: true,
      }
    });

    if (!result.data?.images || result.data.images.length === 0) {
      throw new Error("No images generated by FLUX Kontext Pro");
    }

    const imageUrl = result.data.images[0].url;
    console.log("‚úÖ Image generated successfully with exact jewelry reference");
    return imageUrl;
  } catch (error) {
    console.error("‚ùå FLUX Kontext Pro generation failed:", error);
    throw error;
  }
}

/**
 * Virtual try-on using Bria Product Shot for exact jewelry placement
 * Perfect for when both person and jewelry images are provided
 */
async function tryOnVirtually(personImageUrl: string, jewelryImageUrl: string, prompt?: string): Promise<string> {
  console.log(`üë§ Performing virtual try-on with Bria Product Shot for exact jewelry placement`);
  console.log(`üíç Using exact jewelry image: ${jewelryImageUrl}`);
  console.log(`üë§ Using person image as scene reference: ${personImageUrl}`);
  
  try {
    // Enhanced prompt for jewelry placement on person
    const jewelryDescription = enhanceJewelryPrompt(prompt || "", jewelryImageUrl);
    const scenePrompt = prompt 
      ? `${prompt}, person wearing jewelry, ${jewelryDescription}, professional photography, realistic placement, proper lighting, high resolution`
      : `person wearing elegant jewelry, ${jewelryDescription}, professional portrait photography, realistic jewelry placement, natural lighting, high quality`;
    
    console.log(`üé® Scene description: "${scenePrompt}"`);
    
    // Use Bria Product Shot to place exact jewelry on person
    const result = await fal.subscribe("fal-ai/bria/product-shot", {
      input: {
        image_url: jewelryImageUrl, // The exact jewelry to place
        scene_description: scenePrompt, // Use our enhanced scene description
        ref_image_url: personImageUrl, // The person as scene reference
        optimize_description: true,
        num_results: 1,
        fast: true,
        placement_type: "automatic", // Let AI find best placement
        shot_size: [1024, 1024],
      }
    });
    
    if (!result.data?.images || result.data.images.length === 0) {
      throw new Error("No images generated by Bria Product Shot");
    }
    
    const imageUrl = result.data.images[0].url;
    console.log(`‚úÖ Virtual try-on completed: ${imageUrl}`);
    
    return imageUrl;
  } catch (error) {
    console.error(`‚ùå Virtual try-on failed:`, error);
    throw new Error(`Virtual try-on failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

function enhanceJewelryPrompt(originalPrompt: string, jewelryImageUrl: string): string {
  // Extract potential jewelry type from URL or prompt
  const jewelryTypes = {
    'necklace': 'elegant statement necklace with intricate metallic details, ornate pendant',
    'ring': 'beautiful ornate ring with detailed metalwork and gemstones',
    'earring': 'elegant drop earrings with intricate designs and metallic finish',
    'bracelet': 'sophisticated bracelet with detailed chain links and ornate patterns',
    'pendant': 'ornate pendant necklace with detailed metalwork and elegant design',
    'chain': 'elegant chain necklace with sophisticated metallic craftsmanship',
    'bangle': 'decorative bangle with intricate patterns and premium finish',
    'anklet': 'delicate anklet with refined design elements',
    'brooch': 'vintage-style brooch with detailed metalwork and classic appeal'
  };
  
  // Analyze URL and prompt for jewelry type keywords
  const textToAnalyze = `${originalPrompt} ${jewelryImageUrl}`.toLowerCase();
  
  for (const [type, description] of Object.entries(jewelryTypes)) {
    if (textToAnalyze.includes(type)) {
      return description;
    }
  }
  
  // Default description for unidentified jewelry
  return 'exquisite jewelry piece with detailed craftsmanship, premium materials, and elegant design';
}

// 5. Main worker processor
const imageProcessor = async (job: Job) => {
  console.log(`\nüîÑ Processing job ${job.id}`);
  console.log(`üìã Job data:`, job.data);
  
  try {
    // Validate job data
    const { imageUrl, prompt, personImage } = jobDataSchema.parse(job.data);
    
    let finalImageUrl: string;
    
    if (personImage) {
      // Scenario 1: Virtual Try-On (Person + Jewelry images)
      console.log("üéØ Mode: Virtual Try-On (Person + Jewelry)");
      console.log("üìã Process: Person image + Jewelry image ‚Üí Try-on result");
      
      // Step 1: Remove background from person's image
      const processedPersonImage = await removePersonBackground(personImage);
      
      // Step 2: Perform virtual try-on with exact jewelry
      finalImageUrl = await tryOnVirtually(processedPersonImage, imageUrl, prompt);
      
    } else if (prompt) {
      // Scenario 2: Prompt-based generation with exact jewelry reference
      console.log("üéØ Mode: Prompt-based with Exact Jewelry Reference");
      console.log("üìã Process: Jewelry image + Prompt ‚Üí Generated person wearing exact jewelry");
      
      // Generate image using jewelry as reference
      finalImageUrl = await generateWithJewelryReference(imageUrl, prompt);
      
    } else {
      throw new Error("Either 'prompt' or 'personImage' must be provided");
    }
    
    // 6. Update job with result
    console.log("‚úÖ Job completed successfully!");
    console.log(`üñºÔ∏è  Final image: ${finalImageUrl}`);
    
    await job.updateProgress(100);
    return { 
      success: true, 
      imageUrl: finalImageUrl,
      processingMode: personImage ? 'virtual-try-on' : 'prompt-with-reference'
    };
    
  } catch (error: any) {
    console.error(`‚ùå Job ${job.id} failed:`, error);
    throw error;
  }
};

// 6. Create and start worker
const worker = new Worker('image-generation', imageProcessor, {
  connection: {
    host: 'localhost',
    port: 6379,
  },
  concurrency: 1,
});

worker.on('completed', (job) => {
  console.log(`üéâ Job ${job.id} completed successfully`);
});

worker.on('failed', (job, err) => {
  console.error(`üí• Job ${job?.id} failed:`, err);
});

worker.on('error', (err) => {
  console.error('üö® Worker error:', err);
});

console.log("üî• Image generation worker is running and waiting for jobs...");
console.log("üìä Configuration:");
console.log("   ‚Ä¢ Prompt-based: FLUX Kontext Pro (exact jewelry reference)");
console.log("   ‚Ä¢ Virtual try-on: Bria Product Shot (person + jewelry)");
console.log("   ‚Ä¢ Background removal: Fal.ai RemBG"); 